// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  name         String
  role         Role           @default(user)
  public_id    String
  url          String
  bookings     Booking[]
  blogPost     BlogPost[]
  review       Review[]
  notification Notification[]
  reviewReply  ReviewReply[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

// Service Management

model Service {
  id           String    @id @default(uuid())
  name         String
  location     String
  categoryId   String
  category     Category  @relation(fields: [categoryId], references: [id])
  price        Float
  description  String?
  availability Boolean?
  url          String?
  public_id    String
  reviews      Review[]
  bookings     Booking[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Category {
  id      String    @id @default(uuid())
  name    String
  service Service[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// review rating system
model Review {
  id          String       @id @default(uuid())
  rating      Int
  comment     String
  serviceId   String
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  service     Service      @relation(fields: [serviceId], references: [id])
  ReviewReply ReviewReply?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, serviceId])
}

model ReviewReply {
  id       String @id @default(uuid())
  comment  String
  reviewId String @unique
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  review   Review @relation(fields: [reviewId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// notification system
model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  role      Role
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Booking Management
model Booking {
  id              String   @id @default(uuid())
  userId          String
  serviceId       String
  paymentId       String   @default("")
  status          Status   @default(pending)
  start           DateTime
  end             DateTime
  price           String
  travelers       Int // Number of travelers
  specialRequests String // Any special requests
  totalDays       Int
  user            User     @relation(fields: [userId], references: [id])
  service         Service  @relation(fields: [serviceId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Content Management
model BlogPost {
  id        String   @id @default(uuid())
  title     String
  content   String
  published Boolean
  url       String
  public_id String
  author    String // Author's name
  userId    String // Author's user ID
  user      User     @relation(fields: [userId], references: [id])
  // ...
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Add more fields and relationships as needed
}

model Faq {
  id       String @id @default(uuid())
  question String
  answer   String
  category String // FAQ category

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // ...

  // Add more fields and relationships as needed
}

enum Role {
  user
  admin
  superAdmin
}

enum Status {
  accept
  reject
  cancel
  adjust
  pending
}
